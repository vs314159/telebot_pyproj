from aiogram import executor, types
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.utils.exceptions import MessageToEditNotFound

from utils.keyboard import inl_keyboard, get_info
from quiz.quiz import go_handler, answer_handler

from setting import bot, dp
from setting import price_files


class UserData(StatesGroup):
    """
    –ö–ª–∞—Å, —â–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤–≤–µ–¥–µ–Ω–∏—Ö —É –±–æ—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
    name - –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è
    """
    name = State()
    # contacts = State()


async def commands_list_menu(_):
    menu_commands = [types.BotCommand("/start", "–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞ ‚ñ∂Ô∏è"),
                     types.BotCommand("/test_level", "–¢–µ—Å—Ç –Ω–∞ –∑–Ω–∞–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó üë®‚Äçüè´"),
                     types.BotCommand("/guest_format", "–í–∞—Ä—Ç—ñ—Å—Ç—å —ñ —Å–ø–æ—Å–æ–±–∏ –Ω–∞–≤—á–∞–Ω–Ω—è üí∞"),
                     ]
    await bot.set_my_commands(menu_commands)


@dp.message_handler(commands=['start', 'test_level', 'guest_format'])
async def start(message, state):
    """
    –û–±—Ä–æ–±–∫–∞ –æ—Å–Ω–æ–≤–Ω–∏—Ö –∫–æ–º–∞–Ω–¥

    """
    data = await state.get_data()
    if data.get('chat_id', None):
        try:
            # –≤–∏–¥–∞–ª—è—î —ñ–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –∞–±–æ –º–æ–∂–Ω–∞ –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞
            # –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ —ñ–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
            await bot.edit_message_reply_markup(chat_id=data['chat_id'],
                                                message_id=data['msg_id'],
                                                reply_markup=None)
        except MessageToEditNotFound:
            pass
    await state.finish()
    command = message.text.split()[0][1:]
    msg, next_calls, back_opt = get_info(command)
    inl_kb = inl_keyboard(next_calls, back_opt)
    answ = await message.answer(text=msg, reply_markup=inl_kb)
    # –ö–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω–µ —â–µ –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É - –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è,
    # —â–æ –Ω–∞–¥—Å–∏–ª–∞–ª–æ—Å—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—é –∫–æ–º–∞–Ω–¥–æ—é, –ø–æ–∑–±—É–¥–µ—Ç—å—Å—è —ñ–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
    await state.update_data(chat_id=answ.chat.id, msg_id=answ.message_id)


@dp.message_handler()
async def delete_user_msg(message):
    """
    –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
    """
    await message.delete()


@dp.callback_query_handler(state='*')
async def answer(callback: types.CallbackQuery, state):
    """
    –§—É–Ω–∫—Ü—ñ—è, —â–æ —Ä–µ–∞–≥—É—î –Ω–∞ –∫–æ–ª–±–µ–∫–∏ - –≤–∏–≤–æ–¥–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏,
    –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è —è–∫–∏—Ö —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤—ñ –∫–æ–ª–±–µ–∫–∏, —è–∫—ñ —Ü—è —Ñ—É–Ω–∫—Ü—ñ—è –∑–Ω–æ–≤—É –æ–±—Ä–æ–±–ª—é—î
    """
    call = callback.data
    prev_call = await state.get_data()
    prev_call = prev_call.get('prev_call', None)
    if '{' not in call:
        back = call.startswith('<')
        call = call.lstrip('<')
        msg, next_calls, back_opt = get_info(call)
        inl_kb = inl_keyboard(next_calls, back_opt)
    else:
        await answer_handler(callback, state)
        return
    if call not in ('price', 'more_prices', 'test_level_start'):
        answ = await bot.send_message(callback.from_user.id, msg, reply_markup=inl_kb)
    match call:
        case 'remains':
            #  –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ü–Ü –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø—ñ—Å–ª—è —á–æ–≥–æ
            #  –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó process_name
            await UserData.name.set()
        case 'student':
            await state.finish()  # –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞—Ö–æ—Ç—ñ–≤ –≤–≤–æ–¥–∏—Ç–∏ —ñ–º'—è
        case 'price':
            if len(price_files) in (0, 1):
                inl_kb = inl_keyboard(None, back_opt)  # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–Ω–æ–ø–∫—É '> –î–∞–ª—ñ'
            if len(price_files) > 0:
                photo = price_files[0]
                answ = await bot.send_photo(callback.from_user.id, photo=open(photo, 'rb'), caption=msg, reply_markup=inl_kb)
                await state.update_data(index=len(price_files) > 1)
            else:
                no_prices_msg = '–ù–∞ –∂–∞–ª—å, –Ω–∞ —Ä–∞–∑—ñ –Ω–µ–º–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑ —Ü—ñ–Ω–∞–º–∏ ü•∫'  # –Ø–∫—â–æ –ø–∞–ø–∫–∞ price_images –ø–æ—Ä–æ–∂–Ω—è
                answ = await bot.send_message(callback.from_user.id, no_prices_msg, reply_markup=inl_kb)
        case 'more_prices':
            data = await state.get_data()
            index = data['index']
            if index == len(price_files):
                msg += '(–í–∏ –ø—Ä–æ–≥–ª—è–Ω—É–ª–∏ –≤—Å—ñ)'
                index = 0
            photo = price_files[index]
            answ = await bot.send_photo(callback.from_user.id, photo=open(photo, 'rb'), caption=msg, reply_markup=inl_kb)
            await state.update_data(index=index + 1)
        case 'test_level_start':
            await go_handler(callback.from_user.id)
    leave_msgs = ('price', 'more_prices', 'guest_solo',
                  'guest_duet', 'guest_group', 'test_level_start',)  # –æ—Å—Ç–∞–Ω–Ω—î –∑–±–µ—Ä–µ–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ test_level_done
    if prev_call in leave_msgs and back:
        await callback.message.edit_reply_markup(None)
    else:
        await callback.message.delete()
    await state.update_data(prev_call=call)
    try:
        await state.update_data(chat_id=answ.chat.id, msg_id=answ.message_id)
    except UnboundLocalError:
        pass


@dp.message_handler(state=UserData.name)
async def process_name(message, state):
    """
    –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –ø—Ä—ñ–∑–≤–∏—â–∞ —Ç–∞ —ñ–º–µ–Ω—ñ
    """
    inp_name = message.text.title()
    await state.update_data(name=inp_name)
    await state.finish()
    # –ø—ñ–∑–Ω—ñ—à–µ –¥–æ–¥–∞—Ç–∏ –ø—Ä–µ–≤—ñ—Ä–∫—É —á–∏ —î —Ç–∞–∫–µ —ñ–º'—è –≤ –±–∞–∑—ñ
    # . . .


if __name__ == "__main__":
    executor.start_polling(dispatcher=dp, skip_updates=True, on_startup=commands_list_menu)
