from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from callbacks import callback_info
from json import dumps, load


questions = load(open('questions.json', 'r', encoding='utf-8'))


# SandyGrN's function
def compose_markup(question: int):
    """
    –Ü–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç—É –∑ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    """
    km = InlineKeyboardMarkup(row_width=2)
    for i in range(len(questions[question]["variants"])):
        cd = {
            "question": question,
            "answer": i
        }
        km.insert(InlineKeyboardButton(questions[question]["variants"][i], callback_data=dumps(cd)))
    km.insert(InlineKeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ç–µ—Å—Ç üõë', callback_data='guest'))
    return km


def inl_keyboard(next_calls: tuple[str] = None, back_opt: str = None) -> InlineKeyboardMarkup:
    """
    –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä—é—î —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏, —â–æ –±–∞–∑—É—é—Ç—å—Å—è –Ω–∞ next_calls,
    –¢–∞ –∫–Ω–æ–ø–∫–æ—é '< –ù–∞–∑–∞–¥', —è–∫—â–æ –∫–æ–ª–±–µ–∫ –º—ñ—Å—Ç–∏—Ç—å –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ
    '–º–∞—Ç–µ—Ä–∏–Ω—Å—å–∫–æ–≥–æ' –∫–æ–ª–±–µ–∫—É
    """
    options = dict()
    if next_calls is not None:
        options = {nxt_opt: callback_info[nxt_opt] for nxt_opt in next_calls}
    buttons = (InlineKeyboardButton(text=opt.btn_name,
                                    url=opt.url,
                                    callback_data=call)
               for call, opt in options.items())
    kb = InlineKeyboardMarkup(row_width=1).add(*buttons)
    if back_opt is not None:
        kb.add(InlineKeyboardButton(text='< –ù–∞–∑–∞–¥', callback_data='<' + back_opt))
    return kb


def get_info(call: str) -> (str, tuple[str], str):
    """
    –§—É–Ω–∫—Ü—ñ—è, —â–æ –≤–∏—Ç—è–≥—É—î –∑ —Å–ª–æ–≤–Ω–∏–∫–∞ callback_info –∑–∞ –∫–ª—é—á–µ–º call
    –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ —Ç—Ä–µ–±–∞ –≤–∏–≤–µ—Å—Ç–∏, –∫–æ–ª–±–µ–∫–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫
    —ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ '–º–∞—Ç–µ—Ä–∏–Ω—Å—å–∫–∏–π' –∫–æ–ª–±–µ–∫ (–∫–Ω–æ–ø–∫–∏ '< –ù–∞–∑–∞–¥')
    """
    info = callback_info[call]
    msg = info.msg
    next_calls = info.next_calls
    back_opt = info.back_opt
    return msg, next_calls, back_opt
